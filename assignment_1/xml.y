%{
#include <iostream>
#include <string>
#include <stdlib.h>
#include <algorithm>
#define MAX_LEN 1024
using namespace std;
int yylex(); // A function that is to be generated and provided by flex,
             // which returns a next token when called repeatedly.
int yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
%}

%union {
    char name[MAX_LEN];;
    /* You may include additional fields as you want. */
    /* char op; */
};

%start COMPLETES

%token TEXT 
%token <name> OPENTAG CLOSETAG    /* 'val' is the (only) field declared in %union
                       which represents the type of the token. */

%%


COMPLETES : COMPLETE | COMPLETE COMPLETES { std::cout << "concatenating tag" << std::endl;}

COMPLETE : OPENTAG COMPLETEBODIES CLOSETAG { 
        if ($1 == $3)
           {std::cout << "bison matched tag: " << $1 <<"\n";}
	else {std::cout<< "bison could not find matched tag: "<< $1 <<"\n"; exit(1);}
          }

COMPLETEBODIES : COMPLETEBODY | COMPLETEBODY COMPLETEBODIES {std::cout << "made COMPLETEBODIES" <<std::endl;}

COMPLETEBODY : TEXT | COMPLETE | "" {std::cout << "made COMPLETEBODY" << std::endl;}


%%

int main()
{
    yyparse(); // A parsing function that will be generated by 
    return 0;
}
